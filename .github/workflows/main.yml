# You may pin to the exact commit or the version.
  # uses: aabadie/action-install-python-requirements@bd1357189566c9678a47677d561b4b8e113d9787
  uses: aabadie/action-install-python-requirements@v2.0.1
  with:
    # requirements text file
    requirements: # default is requirements.txt
    # Whether pip also has to be updated
    update-pip: 

        import cv2
import numpy as np
from matplotlib import pyplot as plt

# Älteres Futhark – Runenliste (nur symbolisch als Platzhalter, 
# echte Muster müssten mit Vorlagenbildern ergänzt werden)
runes = {
    "Fehu": "F", "Uruz": "U", "Thurisaz": "Th", "Ansuz": "A",
    "Raidho": "R", "Kenaz": "K", "Gebo": "G", "Wunjo": "W",
    "Hagalaz": "H", "Nauthiz": "N", "Isa": "I", "Jera": "J",
    "Eihwaz": "Ei", "Perthro": "P", "Algiz": "Z", "Sowilo": "S",
    "Tiwaz": "T", "Berkano": "B", "Ehwaz": "E", "Mannaz": "M",
    "Laguz": "L", "Ingwaz": "Ng", "Dagaz": "D", "Othala": "O"
}

# Schritt 1: Bild laden
img = cv2.imread("file-MdSE34DnS1Z3R5uY1eGsqZ", 0)

# Schritt 2: In Graustufen + Threshold
_, thresh = cv2.threshold(img, 128, 255, cv2.THRESH_BINARY_INV)

# Schritt 3: Konturen finden (für Segmente)
contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

print(f"Gefundene Segmente: {len(contours)}")

# Platzhalter: Normalerweise hier jedes Segment extrahieren und mit Runenvorlage vergleichen
# Für Demo: Wir simulieren eine Beispiel-Übersetzung

rune_sequence = ["Ansuz", "Raidho", "Kenaz", "Isa", "Dagaz"]

# Übersetzung in Buchstaben
letters = [runes[r] for r in rune_sequence]
word = "".join(letters)

# Deutsche Bedeutung (vereinfacht für Demo)
german_translation = "Botschaft: 'AR-KID' → steht symbolisch für Neubeginn und Erkenntnis."

print("Erkannte Runenfolge:", rune_sequence)
print("Buchstaben:", word)
print("Deutsche Übersetzung:", german_translation)

# Ergebnis visualisieren
plt.imshow(thresh, cmap='gray')
plt.title("Segmentierte Symbole")
plt.show()
            - Name: Rational Test Automation Server GitHub-Aktion
  # Sie können das genaue Commit oder die Version anheften.
  # verwendet: IBM/devopsauto-testserver-actions@c704855bdbbae4f0df152919d00fb0bd40f67ee0
  verwendet: IBM/devopsauto-testserver-actions@v1
  mit:
    # Rational Test Automation Server-URL
    Server-URL:
    # Offline-Token des Rational Test Automation Servers
    offlineToken:
    # Name des Teambereichs
    Teambereich:
    # Projektname
    Projekt:
    # Name des Zweigs, in dem der Test vorhanden ist
    Zweig:
    # AssetId des Tests im Rational Test Automation Server.
    Asset-ID:
    # Optional. Testumgebung entsprechend dem Test. Die Eingabe des Werts ist obligatorisch, wenn Sie einen API-Test ausführen möchten.
    Umgebung: # optional
    # Optional. Durch Komma (,) getrennte Werte von Datensätzen für den auszuführenden Job, zum Beispiel: Quelle:Ersatz;Quelle:Ersatz
    Datensätze: # optional
    # Optional. Dem Test entsprechende Beschriftungen. Beispiel: label1, label2
    Beschriftungen: # optional
    # Optional. Name der Geheimnissammlung für den auszuführenden Job.
    secretsCollection: # optional
    # Optional. Variablen, die dem Test entsprechen. Sie müssen die Variablen im folgenden Format eingeben: Name_der_Variable=Wert_der_Variable
    Variablen: # optional
          
